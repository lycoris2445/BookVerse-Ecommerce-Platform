import ApiService from './api';

class PaymentService {
  // PayPal Integration Methods
  async createPayPalOrder(orderId) {
    try {
      const response = await ApiService.request('/payments/paypal/create-order/', {
        method: 'POST',
        body: JSON.stringify({ order_id: orderId })
      });
      
      return response;
    } catch (error) {
      console.error('Create PayPal order failed:', error);
      throw error;
    }
  }

  async capturePayPalPayment(paypalOrderId) {
    try {
      const response = await ApiService.request('/payments/paypal/capture/', {
        method: 'POST',
        body: JSON.stringify({ paypal_order_id: paypalOrderId })
      });
      
      return response;
    } catch (error) {
      console.error('Capture PayPal payment failed:', error);
      throw error;
    }
  }

  // Legacy Payment Methods
  // Kh·ªüi t·∫°o thanh to√°n
  async chargePayment(paymentData) {
    try {
      const response = await ApiService.request('/payments/charge/', {
        method: 'POST',
        body: JSON.stringify(paymentData)
      });
      
      return response;
    } catch (error) {
      console.error('Charge payment failed:', error);
      throw error;
    }
  }

  // L·∫•y tr·∫°ng th√°i thanh to√°n
  async getPaymentStatus(paymentId) {
    try {
      return await ApiService.request(`/payments/${paymentId}/status/`);
    } catch (error) {
      console.error('Get payment status failed:', error);
      throw error;
    }
  }

  // L·∫•y th√¥ng tin thanh to√°n c·ªßa ƒë∆°n h√†ng
  async getOrderPayment(orderId) {
    try {
      return await ApiService.request(`/payments/order/${orderId}/`);
    } catch (error) {
      console.error('Get order payment failed:', error);
      throw error;
    }
  }

  // L·∫•y th√¥ng tin sandbox (m√¥i tr∆∞·ªùng test)
  async getSandboxInfo() {
    try {
      return await ApiService.request('/payments/sandbox/info/', { auth: false });
    } catch (error) {
      console.error('Get sandbox info failed:', error);
      // Return default sandbox info
      return {
        environment: 'sandbox',
        test_cards: {
          '4111111111111111': { type: 'visa', behavior: 'success' },
          '4000000000000002': { type: 'visa', behavior: 'decline' },
          '5555555555554444': { type: 'mastercard', behavior: 'success' }
        },
        description: 'M√¥i tr∆∞·ªùng test thanh to√°n'
      };
    }
  }

  // Simulate webhook (m√¥i tr∆∞·ªùng test)
  async simulateWebhook(paymentId, status = 'success') {
    try {
      const response = await ApiService.request(`/payments/sandbox/webhook/${paymentId}/`, {
        method: 'POST',
        body: JSON.stringify({ status })
      });
      
      return response;
    } catch (error) {
      console.error('Simulate webhook failed:', error);
      throw error;
    }
  }

  // Get test card information
  getTestCards() {
    return [
      {
        number: '4111111111111111',
        type: 'visa',
        behavior: 'success',
        description: 'Visa - Always succeeds',
        cvv: '123',
        expiry: '12/25'
      },
      {
        number: '5555555555554444',
        type: 'mastercard',
        behavior: 'success',
        description: 'Mastercard - Always succeeds',
        cvv: '123',
        expiry: '12/25'
      },
      {
        number: '4000000000000002',
        type: 'visa',
        behavior: 'decline',
        description: 'Visa - Generic decline',
        cvv: '123',
        expiry: '12/25'
      },
      {
        number: '4000000000000069',
        type: 'visa',
        behavior: 'decline_expired',
        description: 'Visa - Expired card',
        cvv: '123',
        expiry: '12/20'
      }
    ];
  }

  // Test payment with sandbox
  async testPayment(cardData, amount, orderId) {
    try {
      const testCards = this.getTestCards();
      const testCard = testCards.find(card => card.number === cardData.cardNumber.replace(/\s/g, ''));
      
      if (testCard) {
        // Simulate different behaviors based on test card
        await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate processing time
        
        if (testCard.behavior === 'success') {
          return {
            status: 'success',
            payment_id: `test_payment_${Date.now()}`,
            message: 'Thanh to√°n th√†nh c√¥ng (Test)',
            amount: amount,
            card_type: testCard.type
          };
        } else {
          throw new Error(`Thanh to√°n th·∫•t b·∫°i: ${testCard.description}`);
        }
      }
      
      // For real cards in test mode, process normally
      return await this.processOrderPayment(orderId, 'credit_card', {
        card_number: cardData.cardNumber,
        card_holder: cardData.cardholderName,
        expiry_date: cardData.expiryDate,
        cvv: cardData.cvv
      });
      
    } catch (error) {
      console.error('Test payment failed:', error);
      throw error;
    }
  }

  // X·ª≠ l√Ω thanh to√°n cho ƒë∆°n h√†ng
  async processOrderPayment(orderId, paymentMethod, paymentDetails = {}) {
    try {
      const paymentData = {
        order_id: orderId,
        payment_method: paymentMethod,
        ...paymentDetails
      };
      
      return await this.chargePayment(paymentData);
    } catch (error) {
      console.error('Process order payment failed:', error);
      throw error;
    }
  }

  // L·∫•y danh s√°ch ph∆∞∆°ng th·ª©c thanh to√°n
  getPaymentMethods() {
    return [
      {
        id: 'credit_card',
        name: 'Th·∫ª t√≠n d·ª•ng',
        icon: 'üí≥',
        description: 'Visa, MasterCard, JCB',
        enabled: true
      },
      {
        id: 'debit_card',
        name: 'Th·∫ª ghi n·ª£',
        icon: 'üí≥',
        description: 'Th·∫ª ATM n·ªôi ƒë·ªãa',
        enabled: true
      },
      {
        id: 'momo',
        name: 'V√≠ MoMo',
        icon: 'üì±',
        description: 'Thanh to√°n qua v√≠ ƒëi·ªán t·ª≠ MoMo',
        enabled: true
      },
      {
        id: 'zalopay',
        name: 'ZaloPay',
        icon: 'üì±',
        description: 'Thanh to√°n qua v√≠ ƒëi·ªán t·ª≠ ZaloPay',
        enabled: true
      },
      {
        id: 'banking',
        name: 'Chuy·ªÉn kho·∫£n ng√¢n h√†ng',
        icon: 'üè¶',
        description: 'Internet Banking',
        enabled: true
      },
      {
        id: 'cod',
        name: 'Thanh to√°n khi nh·∫≠n h√†ng',
        icon: 'üì¶',
        description: 'Tr·∫£ ti·ªÅn m·∫∑t khi nh·∫≠n h√†ng',
        enabled: true
      }
    ];
  }

  // L·∫•y tr·∫°ng th√°i thanh to√°n v·ªõi ƒë·ªãnh d·∫°ng hi·ªÉn th·ªã
  getPaymentStatus(status) {
    const statusMap = {
      'pending': { text: 'Ch·ªù thanh to√°n', class: 'status-pending', color: '#f59e0b' },
      'processing': { text: 'ƒêang x·ª≠ l√Ω', class: 'status-processing', color: '#3b82f6' },
      'success': { text: 'Thanh to√°n th√†nh c√¥ng', class: 'status-success', color: '#10b981' },
      'failed': { text: 'Thanh to√°n th·∫•t b·∫°i', class: 'status-failed', color: '#ef4444' },
      'cancelled': { text: 'ƒê√£ h·ªßy', class: 'status-cancelled', color: '#6b7280' },
      'refunded': { text: 'ƒê√£ ho√†n ti·ªÅn', class: 'status-refunded', color: '#8b5cf6' }
    };
    
    return statusMap[status] || { text: status, class: 'status-unknown', color: '#6b7280' };
  }

  // Validate th√¥ng tin th·∫ª t√≠n d·ª•ng
  validateCreditCard(cardData) {
    const errors = {};
    
    // Validate card number
    if (!cardData.cardNumber) {
      errors.cardNumber = 'S·ªë th·∫ª kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
    } else if (!/^\d{13,19}$/.test(cardData.cardNumber.replace(/\s/g, ''))) {
      errors.cardNumber = 'S·ªë th·∫ª kh√¥ng h·ª£p l·ªá';
    }
    
    // Validate expiry date
    if (!cardData.expiryDate) {
      errors.expiryDate = 'Ng√†y h·∫øt h·∫°n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
    } else if (!/^(0[1-9]|1[0-2])\/\d{2}$/.test(cardData.expiryDate)) {
      errors.expiryDate = 'Ng√†y h·∫øt h·∫°n kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng (MM/YY)';
    } else {
      const [month, year] = cardData.expiryDate.split('/');
      const currentDate = new Date();
      const expiryDate = new Date(`20${year}`, month - 1);
      
      if (expiryDate < currentDate) {
        errors.expiryDate = 'Th·∫ª ƒë√£ h·∫øt h·∫°n';
      }
    }
    
    // Validate CVV
    if (!cardData.cvv) {
      errors.cvv = 'M√£ CVV kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
    } else if (!/^\d{3,4}$/.test(cardData.cvv)) {
      errors.cvv = 'M√£ CVV kh√¥ng h·ª£p l·ªá';
    }
    
    // Validate cardholder name
    if (!cardData.cardholderName) {
      errors.cardholderName = 'T√™n ch·ªß th·∫ª kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
    } else if (cardData.cardholderName.length < 2) {
      errors.cardholderName = 'T√™n ch·ªß th·∫ª qu√° ng·∫Øn';
    }
    
    return {
      isValid: Object.keys(errors).length === 0,
      errors
    };
  }

  // Format s·ªë th·∫ª t√≠n d·ª•ng
  formatCardNumber(cardNumber) {
    return cardNumber.replace(/\s/g, '').replace(/(.{4})/g, '$1 ').trim();
  }

  // Detect lo·∫°i th·∫ª t√≠n d·ª•ng
  detectCardType(cardNumber) {
    const number = cardNumber.replace(/\s/g, '');
    
    if (/^4/.test(number)) return 'visa';
    if (/^5[1-5]/.test(number)) return 'mastercard';
    if (/^3[47]/.test(number)) return 'amex';
    if (/^35/.test(number)) return 'jcb';
    
    return 'unknown';
  }

  // T√≠nh ph√≠ thanh to√°n
  calculatePaymentFee(amount, paymentMethod) {
    const feeRates = {
      'credit_card': 0.029, // 2.9%
      'debit_card': 0.015,  // 1.5%
      'momo': 0.02,         // 2%
      'zalopay': 0.02,      // 2%
      'banking': 0.01,      // 1%
      'cod': 0             // 0%
    };
    
    const rate = feeRates[paymentMethod] || 0;
    return Math.round(amount * rate);
  }
}

export default new PaymentService();
